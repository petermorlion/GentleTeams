<?php

/**
* @file
* A custom module for Gentle Ultimate Frisbee and organizing users in teams.
*/

/**
* Implements hook_help.
*
* Displays help and module information.
*
* @param path
*   Which path of the site we're using to display help
* @param arg
*   Array that holds the current path as returned from arg() function
*/
function gentle_teams_help($path, $arg) {
  switch ($path) {
    case "admin/help#gentle_teams":
      return '<p>' . t("A custom module for Gentle Ultimate Frisbee and organizing users in teams.") . '</p>';
      break;
  }
}

/**
* Implementation of hook_menu
*/
function gentle_teams_menu() {
    $items['admin/gentle_teams'] = array(
        'title' => 'Teams',
        'description' => 'Managing Gentle teams.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('gentle_teams_season_overview_form'),
        'access arguments' => array('manage gentle_teams'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/gentle_teams/settings'] = array(
        'title' => 'Settings',
        'description' => 'Settings for the Gentle Teams module.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('gentle_teams_settings_form'),
        'access arguments' => array('manage gentle_teams'),
        'type' => MENU_LOCAL_TASK,
        'weight' => 0
    );

    $items['admin/gentle_teams/seasons'] = array(
        'title' => 'Seasons',
        'description' => 'Overview of the Gentle seasons.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('gentle_teams_season_overview_form'),
        'access arguments' => array('manage gentle_teams'),
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 0
    );

    $items['admin/gentle_teams/seasons/add'] = array(
        'title' => 'Add season',
        'description' => 'Page to add a season.',
        'page callback' => 'gentle_teams_season_get_form',
        'page arguments' => array(3),
        'access arguments' => array('manage gentle_teams'),
        'type' => MENU_LOCAL_ACTION
    );

    $items['admin/gentle_teams/seasons/edit/%'] = array(
        'title' => 'Edit season',
        'description' => 'Page to edit a season.',
        'page callback' => 'gentle_teams_season_get_form',
        'page arguments' => array(3, 4),
        'access arguments' => array('manage gentle_teams')
    );

    $items['admin/gentle_teams/seasons/edit/%/teams'] = array(
        'title' => 'Edit season\'s teams',
        'description' => 'Page to edit a season\'s teams.',
        'page callback' => 'gentle_teams_season_teams_get_form',
        'page arguments' => array(4),
        'access arguments' => array(4),
        'type' => MENU_LOCAL_ACTION
    );

    $items['admin/gentle_teams/seasons/edit/%/teams/add'] = array(
        'title' => 'Add a team',
        'description' => 'Page to add a team to a season.',
        'page callback' => 'gentle_teams_season_teams_edit_get_form',
        'page arguments' => array(4, 6),
        'access arguments' => array('manage gentle_teams'),
        'type' => MENU_LOCAL_ACTION
    );

    $items['admin/gentle_teams/seasons/edit/%/teams/edit/%'] = array(
        'title' => 'Edit a team in a season',
        'description' => 'Page to edit a team in a season.',
        'page callback' => 'gentle_teams_season_teams_edit_get_form',
        'page arguments' => array(4, 6, 7),
        'access arguments' => array('manage gentle_teams'),
    );

    return $items;
}

/**
 * Valid permissions for this module
 * @return array An array of valid permissions for the gentle_teams module
 */
function gentle_teams_perm() {
    return array('manage gentle_teams');
}

/**
 * Implementation of hook_permission. Provides the permissions so they can be selected on the Permissions page.
 */
function gentle_teams_permission() {
    return array(
        'manage gentle_teams' => array(
            'title' => t('Manage Gentle teams.'),
            'description' => t('Allow a user to manage the Gentle Teams.')
        ),
    );
}

/**
 * Determines whether or not the link to edit a season's teams should be visible.
 */
function gentle_teams_season_teams_access($sid, $permission) {
  return $sid != NULL;
}

function gentle_teams_settings_form() {
  $form = array();

  $form['gentle_teams_settings_additional_user_fields'] = array(
    '#type' => 'textfield',
    '#title' => t('Additional user fields'),
    '#required' => FALSE,
    '#description' => t('Defines additional fields to display in the overview of users.'),
  );

  $form['submit_button'] = array(
      '#type' => 'submit'
  );

  return $form;
}

/**
 * Returns the form for the seasons overview.
 */
function gentle_teams_season_overview_form() {
    global $base_url;

    $form = array();

    $header = array(
        array(
            'data' => t('Season'),
            'field' => 'begin',
            'sort' => 'asc'
        ),
        array(
            'field' => 'teamCount',
            'data' => t('Teams'),
        ),
        array(
            'field' => 'playerCount',
            'data' => t('Players'),
        )
    );

    $rows = array();

    $rs = db_query('SELECT innerQuery.id,
                           innerQuery.begin,
                           innerQuery.end,
                           innerQuery.playerCount,
                           count(t.id) as teamCount
                    FROM (
			                   SELECT s.id, s.begin, s.end, count(u.uid) as playerCount
                         FROM gentle_teams_season s
                            LEFT OUTER JOIN gentle_teams_season_users su ON su.sid = s.id
                            LEFT OUTER JOIN users u ON u.uid = su.uid
			                   GROUP BY s.id, s.begin, s.end) innerQuery
                    LEFT OUTER JOIN gentle_teams_team t ON t.sid = innerQuery.id
                    GROUP BY innerQuery.id, innerQuery.begin, innerQuery.end');



    foreach($rs as $row) {
        $season_link_text = $row->begin . '-' .$row->end;
        $season_link = '<a href="' . $base_url . '/admin/gentle_teams/seasons/edit/' . $row->id . '">' . $season_link_text . "</a>";
        $rows[$row->id] = array(
            $season_link,
            $row->teamCount,
            $row->playerCount
        );
    }


    $form['gentle_teams_season_overview'] = array(
        '#type' => 'tableselect',
        '#header' => $header,
        '#options' => $rows,
        '#empty' => t('There are no seasons defined yet.'),
        '#multiple' => TRUE,
    );

    $form['submit_button'] = array(
        '#type' => 'submit',
        '#value' => t('Delete selected'),
    );

    return $form;
}

/**
 * Submits the form for the seasons overview.
 */
function gentle_teams_season_overview_form_submit($form, &$form_state) {
    foreach($form_state['values']['gentle_teams_season_overview'] as $rid) {
        db_delete('gentle_teams_season_users')
            ->condition('sid', $rid)
            ->execute();
        db_delete('gentle_teams_season')
            ->condition('id', $rid)
            ->execute();
    }

    drupal_set_message(t('The selected seasons have been deleted.'));
}

/**
 * Returns the form for adding/editing a season
 */
function gentle_teams_season_get_form($mode, $sid = NULL) {
    return drupal_get_form('gentle_teams_season_form', $mode, $sid);
}

/**
 * The form for adding/editing a season
 */
function gentle_teams_season_form($form, $form_state, $mode, $sid = NULL) {
    global $base_url;

    $form = array();

    $default_begin = intval(date('Y'));
    $default_end = intval(date('Y')) + 1;
    $season_id = NULL;

    $years = array();
    for ($i = 2010; $i <= 2050; $i++) {
        $years[$i] = $i;
    }

    if ($sid != NULL) {
        $rs = db_query('SELECT id, begin, end
                        FROM {gentle_teams_season}
                        WHERE id = :sid', array(':sid' => $sid));
        foreach($rs as $season) {
            $default_begin = $season->begin;
            $default_end = $season->end;
            $season_id = $season->id;
        }

        if ($season_id == NULL) {
            drupal_set_message(t('The season with id ' . $sid . 'could not be found.'), 'error');
        }
    }

    $form['#prefix'] = '
        <script type="text/javascript">
            function ToggleAllUsers(checkbox) {
                var rowsToHide = document.getElementsByClassName("not-in-season");

                var display = checkbox.checked ? "none" : "";

                for(var i = 0; i < rowsToHide.length; i++) {
                    rowsToHide[i].style.display = display;
                }
            }
        </script>
        ';

    $form['gentle_teams_season_id'] = array(
        '#type' => 'hidden',
        '#default_value' => $season_id,
    );

    $form['gentle_teams_season_begin'] = array(
        '#type' => 'select',
        '#title' => t('Begin'),
        '#description' => t('The year when the season starts.'),
        '#default_value' => $default_begin,
        '#options' => $years,
    );

    $form['gentle_teams_season_end'] = array(
        '#type' => 'select',
        '#title' => t('End'),
        '#description' => t('The year when the season ends.'),
        '#default_value' => $default_end,
        '#options' => $years,
    );

    $form['gentle_teams_season_toggle'] = array(
        '#type' => 'checkbox',
        '#title' => t('Only show users active in this season'),
        '#default_value' => 0,
        '#attributes' => array(
            'onclick' => 'ToggleAllUsers(this);'
        )
    );

    $header = array(
        'name' => array(
            'data' => 'User',
            'field' => 'name',
            'sort' => 'asc'
        )
    );

    $rs = db_query('select u.uid, u.name, su.sid
                    from {users} u
                        left outer join {gentle_teams_season_users} su on su.uid = u.uid and su.sid = :sid
                    where u.status = 1', array('sid' => $season_id));

    $rows = array();
    $default_values = array();

    foreach ($rs as $rs_item) {
	    $row = $rs_item;

        $rows[$row->uid] = array(
            'name' => $row->name,
            '#attributes' => array(
                'class' => array($row->sid == NULL ? 'not-in-season' : '')
            )
        );

        if ($row->sid != NULL) {
            $default_values[$row->uid] = TRUE;
        }
    }

    $form['gentle_teams_season_users'] = array(
        '#type' => 'tableselect',
        '#header' => $header,
        '#options' => $rows,
        '#empty' => t('Couldn\'t find any users.'),
        '#multiple' => TRUE,
        '#js_select' => FALSE,
        '#default_value' => $default_values,
    );

    $form['submit_button'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
    );

    return $form;
}

/**
 * Validating the form to add a season.
 */
function gentle_teams_season_form_validate($form, &$form_state) {
    // TODO: check if season already exists
    $begin = intval($form_state['values']['gentle_teams_season_begin']);
    $end = intval($form_state['values']['gentle_teams_season_end']);
    if ($begin > $end) {
        form_set_error('gentle_teams_season_begin', t('The begin year must be smaller than or equal to the end year.'));
    }
}

/**
 * Submitting the form to add/edit a season.
 */
function gentle_teams_season_form_submit($form, &$form_state) {
    $sid = intval($form_state['values']['gentle_teams_season_id']);
    $begin = intval($form_state['values']['gentle_teams_season_begin']);
    $end = intval($form_state['values']['gentle_teams_season_end']);

    if ($sid == NULL) {
        $sid = db_insert('gentle_teams_season')
        ->fields(array(
            'begin' => $begin,
            'end' => $end,
        ))
        ->execute();

        drupal_set_message(t('The season was added.'));
    } else {
        db_update('gentle_teams_season')
        ->fields(array(
            'begin' => $begin,
            'end' => $end,
        ))
        ->condition('id', $sid, '=')
        ->execute();

        drupal_set_message(t('The season was updated.'));
    }

    db_delete('gentle_teams_season_users')
            ->condition('sid', $sid)
            ->execute();

    foreach($form_state['values']['gentle_teams_season_users'] as $uid) {
        if($uid != 0) {
            db_insert('gentle_teams_season_users')
                ->fields(array(
                    'uid' => $uid,
                    'sid' => $sid,
                ))
                ->execute();
        }
    }

    $form_state['redirect'] = 'admin/gentle_teams/seasons';
}

/**
 * Returns the form for editing a season's teams
 */
function gentle_teams_season_teams_get_form($sid) {
    return drupal_get_form('gentle_teams_season_teams_form', $sid);
}

/**
 * The form for editing a season's teams
 */
function gentle_teams_season_teams_form($form, $form_state, $sid) {
    global $base_url;

    $form = array();

    $header = array(
        array(
            'data' => 'Name',
            'field' => 'name',
            'sort' => 'asc'
        ),
        array(
            'data' => 'Players',
            'field' => 'count'
        )
    );

    $rows = array();

    $rs = db_query('SELECT t.id, t.sid, t.name, count(tu.uid) as count
                    FROM {gentle_teams_team} t
                        INNER JOIN {gentle_teams_season} s on s.id = t.sid
                        LEFT OUTER JOIN {gentle_teams_team_users tu on tu.tid = t.id
                    WHERE s.id = :sid
                    GROUP BY t.id, t.sid, t.name', array('sid' => $sid));

    foreach($rs as $row) {
        $team_link = '<a href="' . $base_url . '/admin/gentle_teams/seasons/edit/' . $row->sid . '/teams/edit/' . $row->id . '">' . $row->name . "</a>";
        $rows[$row->id] = array(
            $team_link,
            $row->count
        );
    }

    $form['gentle_teams_team_overview'] = array(
        '#type' => 'tableselect',
        '#header' => $header,
        '#options' => $rows,
        '#empty' => t('There are no teams defined for this season yet.'),
        '#multiple' => TRUE,
    );

    $form['submit_button'] = array(
        '#type' => 'submit',
        '#value' => t('Delete selected'),
    );

    return $form;
}

/**
 * Submitting the form to delete a season's teams
 */
function gentle_teams_season_teams_form_submit($form, $form_state) {
    foreach($form_state['values']['gentle_teams_team_overview'] as $tid) {
        db_delete('gentle_teams_team_users')
            ->condition('tid', $tid)
            ->execute();
        db_delete('gentle_teams_team')
            ->condition('id', $tid)
            ->execute();
    }

    drupal_set_message(t('The selected teams have been deleted.'));
}

/**
 * Returns the form for adding/editing a team in a season
 */
function gentle_teams_season_teams_edit_get_form($sid, $mode, $tid = NULL) {
    return drupal_get_form('gentle_teams_season_teams_edit_form', $sid, $mode, $tid);
}

/**
 * The form for adding/editing a team in a season
 */
function gentle_teams_season_teams_edit_form($form, $form_state, $sid, $mode, $tid) {
    $form = array();
    $team_id = NULL;
    $team_name = '';

    if ($tid != NULL) {
        $rs = db_query('SELECT id, name
                        FROM {gentle_teams_team}
                        WHERE id = :tid', array(':tid' => $tid));
        foreach($rs as $team) {
            $team_name = $team->name;
            $team_id = $team->id;
        }

        if ($team_id == NULL) {
            drupal_set_message(t('The team with id ' . $tid . 'could not be found.'), 'error');
        }
    }

    $form['#prefix'] = '
        <script type="text/javascript">
            function ToggleAllUsers(checkbox) {
                var rowsToHide = document.getElementsByClassName("not-in-team");

                var display = checkbox.checked ? "none" : "";

                for(var i = 0; i < rowsToHide.length; i++) {
                    rowsToHide[i].style.display = display;
                }
            }
        </script>
        ';

    $form['gentle_teams_season_id'] = array(
        '#type' => 'hidden',
        '#default_value' => $sid,
    );

    $form['gentle_teams_team_id'] = array(
        '#type' => 'hidden',
        '#default_value' => $team_id,
    );

    $form['gentle_teams_team_name'] = array(
        '#type' => 'textfield',
        '#title' => t('Name'),
        '#required' => TRUE,
        '#default_value' => $team_name,
        '#description' => t('The name of the team.'),
    );

    $form['gentle_teams_team_toggle'] = array(
        '#type' => 'checkbox',
        '#title' => t('Only show users active in this team'),
        '#default_value' => 0,
        '#attributes' => array(
            'onclick' => 'ToggleAllUsers(this);'
        )
    );

    $header = array(
        'name' => array(
            'data' => 'User',
            'field' => 'name',
            'sort' => 'asc'
        )
    );

    $rs = db_query('select u.uid, u.name, su.sid, tu.tid
                    from {users} u
                        inner join {gentle_teams_season_users} su on su.uid = u.uid
                        left outer join {gentle_teams_team_users} tu on tu.uid = u.uid and tu.tid = :tid
                    where u.status = 1 and su.sid = :sid', array('sid' => $sid, 'tid' => $tid));

    $rows = array();
    $default_values = array();

    foreach ($rs as $rs_item) {
	    $row = $rs_item;

        $rows[$row->uid] = array(
            'name' => $row->name,
            '#attributes' => array(
                'class' => array($row->tid == NULL ? 'not-in-team' : '')
            )
        );

        if ($row->tid != NULL) {
            $default_values[$row->uid] = TRUE;
        }
    }

    $form['gentle_teams_team_users'] = array(
        '#type' => 'tableselect',
        '#header' => $header,
        '#options' => $rows,
        '#empty' => t('Couldn\'t find any users for this team.'),
        '#multiple' => TRUE,
        '#js_select' => FALSE,
        '#default_value' => $default_values,
    );

    $form['submit_button'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
    );

    return $form;
}

/**
 * Validating the teams form
 */
function gentle_teams_season_teams_edit_form_validate($form, &$form_state) {
    $team_name = $form_state['values']['gentle_teams_team_name'];
    if ($team_name == '') {
        form_set_error('gentle_teams_team_name', t('Please specify a name for this team.'));
    }

    // TODO: check if team name in season already exists
}

/**
 * Submitting the teams form
 */
function gentle_teams_season_teams_edit_form_submit($form, &$form_state) {
    $team_name = $form_state['values']['gentle_teams_team_name'];
    $sid = $form_state['values']['gentle_teams_season_id'];
    $tid = $form_state['values']['gentle_teams_team_id'];

    if ($tid == NULL) {
        $tid = db_insert('gentle_teams_team')
        ->fields(array(
            'name' => $team_name,
            'sid' => $sid
        ))
        ->execute();

        drupal_set_message(t('The team was added.'));
    } else {
        db_update('gentle_teams_team')
        ->fields(array(
            'name' => $team_name,
        ))
        ->condition('id', $tid, '=')
        ->execute();

        drupal_set_message(t('The team was updated.'));
    }

    db_delete('gentle_teams_team_users')
            ->condition('tid', $tid)
            ->execute();

    foreach($form_state['values']['gentle_teams_team_users'] as $uid) {
        if($uid != 0) {
            db_insert('gentle_teams_team_users')
                ->fields(array(
                    'uid' => $uid,
                    'tid' => $tid,
                ))
                ->execute();
        }
    }

    $form_state['redirect'] = 'admin/gentle_teams/seasons/edit/' . $sid . '/teams/edit/' . $tid;
}

/**
 * Implements hook_views_api
 */
function gentle_teams_views_api() {
  //watchdog('gentle_teams', 'views api called');

    return array(
        'api' => 3
    );
}

/**
* Implementation of hook_views_data()
*/
function gentle_teams_views_data() {
  //watchdog('gentle_teams', 'views data requested');

  /*
   * The seasons
   */
  $data['gentle_teams_season']['table']['group'] = t('Gentle teams');

  $data['gentle_teams_season']['table']['base'] = array(
    'field' => 'id',
    'title' => t('Gentle seasons'),
    'help' => t('Seasons as defined for Gentle Ultimate.'),
    'weight' => -10,
  );

  $data['gentle_teams_season']['id'] = array(
    'title' => t('Season id'),
    'help' => t('The season id'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click_sortable' => TRUE
    ),
    'sort' => array('handler' => 'views_handler_sort'),
    'filter' => array('handler' => 'views_handler_filter_numeric'),
    'argument' => array('handler' => 'views_handler_argument_numeric')
  );

  $data['gentle_teams_season']['begin'] = array(
    'title' => t('Season begin'),
    'help' => t('The start year of the season'),
    'field' => array(
      'handler' => 'views_handler_field',
      'click_sortable' => TRUE
    ),
    'sort' => array('handler' => 'views_handler_sort'),
  );

  $data['gentle_teams_season']['end'] = array(
    'title' => t('Season end'),
    'help' => t('The end year of the season'),
    'field' => array(
      'handler' => 'views_handler_field',
      'click_sortable' => TRUE
    ),
    'sort' => array('handler' => 'views_handler_sort'),
  );

  /*
   * The teams
   */
  $data['gentle_teams_team']['table']['group'] = t('Gentle teams');

  $data['gentle_teams_team']['table']['base'] = array(
    'field' => 'id',
    'title' => t('Gentle teams'),
    'help' => t('Teams as defined for Gentle Ultimate.'),
    'weight' => -10,
  );

  $data['gentle_teams_team']['table']['join'] = array(
    'gentle_teams_season' => array(
      'left_field' => 'id',
      'field' => 'sid'
    )
  );

  $data['gentle_teams_team']['id'] = array(
    'title' => t('Team id'),
    'help' => t('The team id'),
    'field' => array(
      'handler' => 'views_handler_field',
      'click_sortable' => TRUE
    ),
    'sort' => array('handler' => 'views_handler_sort'),
    'argument' => array('handler' => 'views_handler_argument_numeric'),
  );

  $data['gentle_teams_team']['name'] = array(
    'title' => t('Name'),
    'help' => t('The name of the team'),
    'field' => array(
      'handler' => 'views_handler_field',
      'click_sortable' => TRUE
    ),
    'sort' => array('handler' => 'views_handler_sort'),
  );

   return $data;
}
